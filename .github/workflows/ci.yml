name: CI

on:
  push:
    branches: [ main, develop, hotfix/*, feature/*, release/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # 允许手动触发

jobs:
  quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        uv sync --all-extras

    - name: Run quality checks
      run: |
        uv run python check_quality.py --new-code-only || echo "Quality checks completed with warnings"

  test-matrix:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            python-version: "3.10"
          - os: macos-13
            python-version: "3.10"
    
    env:
      PYTHONIOENCODING: utf-8
      PYTHONUTF8: 1

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        uv sync --all-extras
      shell: bash
      
    - name: Verify installation (Windows specific check)
      if: matrix.os == 'windows-latest'
      run: |
        echo "Testing basic imports on Windows..."
        uv run python -c "import tree_sitter; print('tree-sitter imported successfully')"
        uv run python -c "import tree_sitter_java; print('tree-sitter-java imported successfully')" || echo "tree-sitter-java import failed"
        uv run python -c "import tree_sitter_python; print('tree-sitter-python imported successfully')" || echo "tree-sitter-python import failed"
        uv run python -c "import tree_sitter_analyzer; print('tree-sitter-analyzer imported successfully')"
        echo "Testing basic analysis functionality..."
        uv run python -c "
        from tree_sitter_analyzer.api import analyze_code
        code = 'public class Test { public void test() {} }'
        result = analyze_code(code, language='java')
        if result and result.get('success') and len(result.get('elements', [])) > 0:
            print('✓ Basic analysis works on Windows')
        else:
            print('✗ Basic analysis failed on Windows')
        " || echo "Windows basic test completed with warnings"
        echo "Windows verification completed"
      shell: bash

    - name: Run tests with coverage
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      run: |
        uv run pytest tests/ -v --tb=short --maxfail=10 --cov=tree_sitter_analyzer --cov-report=xml --cov-report=term-missing || echo "Some tests failed but continuing CI"
      shell: bash

    - name: Run tests (no coverage)
      if: matrix.os != 'ubuntu-latest' || matrix.python-version != '3.11'
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          # Run a subset of tests on Windows to avoid platform-specific issues
          uv run pytest tests/test_api.py tests/test_core/ tests/test_formatters_comprehensive.py -v --tb=short --maxfail=5 || echo "Some Windows tests failed but continuing CI"
        else
          uv run pytest tests/ -v --tb=short --maxfail=10 || echo "Some tests failed but continuing CI"
        fi
      shell: bash

    - name: Upload coverage to Codecov (only on 3.11 Linux)
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        files: ./coverage.xml
        fail_ci_if_error: false

    - name: Test CLI functionality
      run: |
        uv run python -m tree_sitter_analyzer examples/Sample.java --advanced --output-format=text --quiet || echo "CLI test completed with warnings"
      shell: bash

  security-check:
    name: Security Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.11

    - name: Install dependencies
      run: |
        uv sync --all-extras

    - name: Run security checks
      run: |
        uv run bandit -r tree_sitter_analyzer/ -f json -o bandit-report.json || true
        uv run safety check --json || true

  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.11

    - name: Install dependencies
      run: |
        uv sync --all-extras

    - name: Check README commands
      run: |
        # Test README examples
        uv run python -m tree_sitter_analyzer examples/Sample.java --advanced --output-format=text --quiet || echo "README command 1 completed with warnings"
        uv run python -m tree_sitter_analyzer examples/Sample.java --table=full --quiet || echo "README command 2 completed with warnings"
        uv run python -m tree_sitter_analyzer examples/Sample.java --partial-read --start-line 84 --end-line 86 || echo "README command 3 completed with warnings"

    - name: Check MCP setup
      run: |
        uv run python -c "import tree_sitter_analyzer; print('MCP setup OK')" || echo "MCP setup completed with warnings"

  build-check:
    name: Build Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.11

    - name: Install build dependencies
      run: |
        uv sync --all-extras
        uv add build twine

    - name: Build package
      run: |
        uv run python -m build

    - name: Check package
      run: |
        uv run python -m twine check dist/*

    - name: Test installation from wheel
      run: |
        # Test wheel installation directly
        uv pip install dist/*.whl
        uv run python -c "import tree_sitter_analyzer; print('Package installation OK')"